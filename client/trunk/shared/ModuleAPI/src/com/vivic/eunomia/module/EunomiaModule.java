/*
 * Module.java
 *
 * Created on January 14, 2007, 3:24 PM
 *
 */

package com.vivic.eunomia.module;

/**
 * <p>Eunomia is a modular frame work designed for generic processing and reporting.
 * It is optimized for network and real-time information processing. The system
 * consists of the three components, ideally each would execute on a separate host:
 *
 *    <ul>
 *    <li><B>Sieve:</B> This component performs all the heavy lifting. It executes
 *    the modules' processing functions, manages data and maintains state.
 *    <li><B>Console:</B> This is a stateless component that is used for accessing
 *    Sieve's functionality and data. It can be compared to a web browser. The
 *    console allows the user to connect to multiple Sieves at the same time.
 *    <li><B>Sensor:</B> The data that Sieve's modules process is generated a
 *    Sensor. The sensor resides on collects information from the network and
 *    formats it for processing by the Sieve. It is also possible for the Sensor
 *    to do some basic processing to summarize the data before it is fully
 *    processed by the modules.
 *    </ul>
 * <p>There are FIVE module types. Each type has it's own internal number and
 * a constant to represent it (Read more in the {@link Descriptor} class):
 *
 * <pre>
 *    TYPE_PROC = 0 // Flow processor.
 *    TYPE_FLOW = 1 // Flow producer.
 *    TYPE_ANLZ = 2 // Static analysis
 *    TYPE_COLL = 3 // Flow collection (to DB).
 *    TYPE_LIBB = 4 // 3rd party library.
 * <pre>
 *
 * <ul>
 *    <li><B>Flow processor:</B> Module that performs real-time processing on the
 *    incoming data from sensors. Each data segment is represented in a form of a
 *    flow. The flow is defined by TYPE_FLOW module. The Flow Processor module
 *    should be a highly tuned piece of code because the amount of data that the
 *    Sieve can process depends directly on how fast each flow processor module is.
 *    <li><B>Flow producer:</B> Module that parses the real-time data generated by
 *    each sensor. This data would be represented by a unique flow class. This
 *    class should contain all the necessary data for the TYPE_PROC module do its
 *    job. It is important to maintain this code highly efficient for the same
 *    reason as the flow processor module.
 *    <li><B>Static Analysis:</B> Module that sifts through data to produce some
 *    sort of knowledge from stored data. It is intended to be a module that
 *    computes various statistics on a database, the data was was stored by
 *    the TYPE_COLL module. Other jobs would include forensic analysis for
 *    pattern discovery. Since this is not a real-time data processing module
 *    it is not necessary to optimize it for performance. Performance may be
 *    sacrifices for other features, such as low memory foot print or minimal
 *    database access.
 *    <li><B>Flow Collection:</B> Module that performs real-time processing on
 *    the incoming data from sensors. The processing is very similar with 2
 *    distinctions from the Flow Process module. One, it is intended for
 *    inserting the data into the database. Two, this module does not have a user
 *    interface component (It does not produce analytical results). Since it is
 *    processing data that is potentially high in volume and is real-time this
 *    module's processing functions should be optimized for speed.
 *    <li><B>3rd Party Library:</B> This is a special type of a module. It cannot
 *    be instantiated in a similar way the other modules can be. This type of
 *    module is designed to provide dependency support to external Java code.
 *    For example, is a module requires an external JAR for producing nice looking
 *    pie charts then it can use the JFreeChart library to do it. While other
 *    modules require a special format, this module is free form that only
 *    requires a file name of a specific format.
 * </ul>
 *
 * To build a module you will need into implement some interfaces:
 * <ul>
 *    <li><b>Flow Producer:</b><br>
 *    Refer to {@link com.vivic.eunomia.module.flow.FlowModule}
 *    <li><b>Flow Processor:</b><br>
 *    Refer to {@link com.vivic.eunomia.module.frontend.FrontendProcessorModule} and {@link com.vivic.eunomia.module.receptor.ReceptorProcessorModule}
 *    <li><b>Analysis Module:</b><br>
 *    Refer to {@link com.vivic.eunomia.module.frontend.FrontendAnalysisModule} and {@link com.vivic.eunomia.module.receptor.ReceptorAnalysisModule}
 * </ul>
 * @author Mikhail Sosonkin
 */
public interface EunomiaModule {
}